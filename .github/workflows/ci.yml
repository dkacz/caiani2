name: CI

on:
  push:
  pull_request:

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -e .
      - name: Run tests
        run: |
          pytest -q
      - name: Smoke SFC (5 periods) + log
        run: |
          mkdir -p artifacts/smoke ci
          python - <<'PY'
from pathlib import Path
from s120_inequality_innovation.core.registry import ParameterRegistry
from s120_inequality_innovation.core.scheduler import run_simulation
res = run_simulation(ParameterRegistry.from_files(), horizon=5, artifacts_dir=Path('artifacts/smoke'))
print('Smoke fm_residuals at', res.fm_residuals_csv)
Path('ci/smoke_log.txt').write_text('SFC smoke run completed.\\n', encoding='utf-8')
PY
          # Basic residual check
          awk -F, 'NR>1 {if ($3+0>1e-10 || $4+0>1e-10) exit 1}' artifacts/smoke/fm_residuals.csv
      - name: Oracle CLI --help
        run: |
          python -m s120_inequality_innovation.oracle.cli -h || true
      - name: Golden guards (conditional)
        run: |
          if [ -f artifacts/golden_java/baseline/meta.json ] && [ -f artifacts/golden_java/baseline/series.csv ] && [ -f artifacts/golden_java/tax_theta1.5/series.csv ]; then 
            # raw_sources must not include FALLBACK markers
            jq -e '.raw_sources[] | contains("FALLBACK:") | not' artifacts/golden_java/baseline/meta.json > /dev/null || (echo "FALLBACK detected in baseline raw_sources" && exit 1);
            # GDP mean baseline vs frontier differ over t=501..1000
            python - <<'PY'
import pandas as pd
from pathlib import Path
base = pd.read_csv('artifacts/golden_java/baseline/series.csv')
fr   = pd.read_csv('artifacts/golden_java/tax_theta1.5/series.csv')
wb = base[(base['t']>=501)&(base['t']<=1000)]['GDP'].mean()
wf = fr[(fr['t']>=501)&(fr['t']<=1000)]['GDP'].mean()
assert not pd.isna(wb) and not pd.isna(wf), 'Empty window means'
assert abs(wb - wf) > 1e-12, 'Frontier equals baseline GDP mean â€” placeholder suspected'
print('Golden guards passed: GDP means differ.')
PY
          else
            echo "Golden guards skipped (no golden artifacts present)";
          fi
      - name: Parity baseline (conditional)
        run: |
          if [ -f artifacts/golden_java/baseline/series.csv ]; then \
            pytest -q -k parity || true; \
            python - <<'PY' \
from pathlib import Path \
from s120_inequality_innovation.io.golden_compare import compare_baseline, write_baseline_report \
pr = Path('artifacts/baseline/run_001/series.csv') \
jr = Path('artifacts/golden_java/baseline/series.csv') \
if pr.exists() and jr.exists(): \
    res = compare_baseline(pr, jr) \
    write_baseline_report(res, Path('reports/baseline_parity.md')) \
print('Parity step completed') \
PY \
          else \
            echo "No golden baseline found; skipping parity"; \
          fi
      - name: Upload reports (if any)
        uses: actions/upload-artifact@v4
        with:
          name: reports
          path: reports
          if-no-files-found: ignore
      - name: Upload smoke artifacts
        uses: actions/upload-artifact@v4
        with:
          name: smoke
          path: |
            artifacts/smoke
            ci/smoke_log.txt
          if-no-files-found: warn
      - name: List artifacts
        run: |
          ls -R artifacts || true
